diff -Nuar lld-6.0.0.src.orig/ELF/Driver.cpp lld-6.0.0.src/ELF/Driver.cpp
--- lld-6.0.0.src.orig/ELF/Driver.cpp	2018-02-22 10:26:44.000000000 +0100
+++ lld-6.0.0.src/ELF/Driver.cpp	2018-04-10 22:14:15.045247407 +0200
@@ -42,6 +42,7 @@
 #include "lld/Common/Driver.h"
 #include "lld/Common/ErrorHandler.h"
 #include "lld/Common/Memory.h"
+#include "lld/Common/TargetOptionsCommandFlags.h"
 #include "lld/Common/Threads.h"
 #include "lld/Common/Version.h"
 #include "llvm/ADT/StringExtras.h"
@@ -248,18 +249,11 @@
 // LTO calls LLVM functions to compile bitcode files to native code.
 // Technically this can be delayed until we read bitcode files, but
 // we don't bother to do lazily because the initialization is fast.
-static void initLLVM(opt::InputArgList &Args) {
+static void initLLVM() {
   InitializeAllTargets();
   InitializeAllTargetMCs();
   InitializeAllAsmPrinters();
   InitializeAllAsmParsers();
-
-  // Parse and evaluate -mllvm options.
-  std::vector<const char *> V;
-  V.push_back("lld (LLVM option parsing)");
-  for (auto *Arg : Args.filtered(OPT_mllvm))
-    V.push_back(Arg->getValue());
-  cl::ParseCommandLineOptions(V.size(), V.data());
 }
 
 // Some command line options or some combinations of them are not allowed.
@@ -368,7 +362,7 @@
   }
 
   readConfigs(Args);
-  initLLVM(Args);
+  initLLVM();
   createFiles(Args);
   inferMachineType();
   setConfigs();
@@ -681,6 +675,7 @@
   Config->ZWxneeded = hasZOption(Args, "wxneeded");
 
   // Parse LTO plugin-related options for compatibility with gold.
+  std::vector<const char *> LTOOptions({Config->Argv[0].data()});
   for (auto *Arg : Args.filtered(OPT_plugin_opt, OPT_plugin_opt_eq)) {
     StringRef S = Arg->getValue();
     if (S == "disable-verify")
@@ -695,10 +690,13 @@
       Config->ThinLTOJobs = parseInt(S.substr(5), Arg);
     else if (!S.startswith("/") && !S.startswith("-fresolution=") &&
              !S.startswith("-pass-through=") && !S.startswith("mcpu=") &&
-             !S.startswith("thinlto") && S != "-function-sections" &&
-             S != "-data-sections")
-      error(Arg->getSpelling() + ": unknown option: " + S);
+             !S.startswith("thinlto"))
+      LTOOptions.push_back(S.data());
   }
+  // Parse and evaluate -mllvm options.
+  for (auto *Arg : Args.filtered(OPT_mllvm))
+    LTOOptions.push_back(Arg->getValue());
+  cl::ParseCommandLineOptions(LTOOptions.size(), LTOOptions.data());
 
   if (Config->LTOO > 3)
     error("invalid optimization level for LTO: " + Twine(Config->LTOO));
diff -Nuar lld-6.0.0.src.orig/test/ELF/lto-plugin-ignore.s lld-6.0.0.src/test/ELF/lto-plugin-ignore.s
--- lld-6.0.0.src.orig/test/ELF/lto-plugin-ignore.s	2017-08-16 10:21:04.000000000 +0200
+++ lld-6.0.0.src/test/ELF/lto-plugin-ignore.s	2018-04-10 22:19:53.949228661 +0200
@@ -3,9 +3,10 @@
 # RUN: llvm-mc -filetype=obj -triple=x86_64-unknown-linux %s -o %t
 # RUN: ld.lld %t -plugin-opt=/foo/bar -plugin-opt=-fresolution=zed \
 # RUN:   -plugin-opt=-pass-through=-lgcc -plugin-opt=-function-sections \
-# RUN:   -plugin-opt=-data-sections -o /dev/null
+# RUN:   -plugin-opt=-data-sections -plugin-opt=mcpu=x86-64 \
+# RUN:   -plugin-opt=thinlto -o /dev/null
 
-# RUN: not ld.lld %t -plugin-opt=-data-sectionssss \
-# RUN:   -plugin-opt=-function-sectionsss 2>&1 | FileCheck %s
-# CHECK: unknown option: -data-sectionsss
-# CHECK: unknown option: -function-sectionsss
+# RUN: not ld.lld %t -plugin-opt=-data-sectionxxx \
+# RUN:   -plugin-opt=-function-sectionxxx 2>&1 | FileCheck %s
+# CHECK: Unknown command line argument '-data-sectionxxx'
+# CHECK: Unknown command line argument '-function-sectionxxx'
